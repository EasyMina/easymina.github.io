{
    "meta": {
        "name": "hello-world",
        "unix": 1690122013,
        "format": "2023-07-23T16:20:13+02:00",
        "easyMinaVersion": "0.01"
    },
    "environment": {
        "addresses": {
            "splitter": "--",
            "root": ".mina/",
            "deployers": {
                "folder": "deployers/",
                "fullFolder": "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/.mina/deployers/",
                "fileNameStruct": "{{name}}{{splitter}}{{unix}}.json"
            },
            "contracts": {
                "folder": "contracts/",
                "fullFolder": "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/.mina/contracts/",
                "fileNameStruct": "{{name}}{{splitter}}{{unix}}.json"
            },
            "structs": {
                "split": "__",
                "minaAddressRegex": {},
                "deployer": {
                    "name": [
                        "String"
                    ],
                    "type": [
                        "String"
                    ],
                    "time__unix": [
                        "Int"
                    ],
                    "time__format": [
                        "String"
                    ],
                    "address__private": [
                        "String"
                    ],
                    "address__public": [
                        "MinaPublicAddress"
                    ],
                    "comment": [
                        "String"
                    ],
                    "faucet": [
                        "Array"
                    ]
                }
            }
        },
        "workspace": {
            "contracts": {
                "root": "./workdir/",
                "ts": {
                    "folder": "ts/",
                    "full": "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/./workdir/ts/"
                },
                "build": {
                    "folder": "build/",
                    "full": "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/./workdir/build/"
                }
            },
            "gitignore": ".gitignore"
        },
        "template": {
            "regexs": {
                "gist": {}
            },
            "default": {
                "source": "gist::e6baafbad2e42e4a259c10b6a3dcc836",
                "name": "hello-world.ts",
                "type": "gist"
            },
            "parse": {
                "gist": "https://api.github.com/gists/{{three}}",
                "https": "{{one}}"
            }
        }
    },
    "network": {
        "use": "berkeley",
        "berkeley": {
            "explorer": {
                "transaction": "https://berkeley.minaexplorer.com/transaction/",
                "wallet": "https://berkeley.minaexplorer.com/wallet/"
            },
            "node": "https://berkeley.graphql.minaexplorer.com",
            "nodeProxy": "https://proxy.berkeley.minaexplorer.com/graphql",
            "graphQl": "https://berkeley.graphql.minaexplorer.com",
            "faucet": {
                "api": "https://faucet.minaprotocol.com/api/v1/faucet",
                "web": "https://faucet.minaprotocol.com/?address={{address}}",
                "network": "berkeley-qanet"
            },
            "transaction_fee": 100000000
        }
    },
    "console": {
        "symbols": {
            "neutral": "‚¨õ",
            "onProgress1": "üîÑ",
            "onProgress2": "üî•",
            "ok1": "üü©",
            "ok2": "üü™",
            "split": "",
            "failed": "‚ùå"
        },
        "space": 30,
        "messages": {
            "accountComment": "Do not share this file with someone."
        }
    },
    "graphQl": {
        "render": {
            "frameInterval": 500,
            "singleMaxInSeconds": 30
        },
        "presets": {
            "singleRequest": {
                "mode": "maxTries",
                "maxTries": 1,
                "requestInterval": 0
            },
            "newTransaction": {
                "mode": "maxMinutes",
                "maxMinutes": 3,
                "requestIntervalInSeconds": 0
            }
        },
        "transactionByHash": {
            "key": "transaction",
            "type": "hash",
            "cmd": {
                "query": "query q($hash: String!) {\n  transaction(query: {hash: $hash}) {\n    hash\n    dateTime\n    blockHeight\n    from\n    nonce\n    to\n    toAccount {\n      token\n    }\n  }\n}",
                "variables": {
                    "hash": "5Jv6t2eyPZgGNWxct5kkhRwmF5jkEYNZ7JCe1iq6DMusvXGmJwiD"
                },
                "operationName": "q"
            }
        },
        "latestBlockHeight": {
            "key": "block",
            "type": "hash",
            "cmd": {
                "query": "query q($blockHeight_lt: Int) {\n  block(query: {blockHeight_lt: $blockHeight_lt}) {\n    blockHeight\n    dateTime\n  }\n}",
                "variables": {
                    "blockHeight_lt": 999999999
                },
                "operationName": "q"
            }
        },
        "latestBlockHeights": {
            "key": "blocks",
            "type": "array",
            "cmd": {
                "query": "query q($maxBlockHeight: Int!) {\n  blocks(limit: 10, sortBy: BLOCKHEIGHT_DESC, query: { blockHeight_lt: $maxBlockHeight }) {\n    dateTime\n    blockHeight\n  }\n}\n",
                "variables": {
                    "maxBlockHeight": 999999999
                },
                "operationName": "q"
            }
        },
        "latestEventsFromContract": {
            "key": "events",
            "type": "array",
            "cmd": {
                "query": "query q($limit: Int!, $blockHeight_lt: Int!, $creator: String!) {\n events(query: {blockHeight_lt: $blockHeight_lt, blockStateHash: {creator: $creator}}, sortBy: BLOCKHEIGHT_DESC, limit: $limit) {\n blockHeight\n dateTime\n event\n blockStateHash {\n creatorAccount {\n publicKey\n }\n }\n }\n}",
                "variables": {
                    "limit": 10,
                    "blockHeight_lt": 999999999,
                    "creator": "B62qnLVz8wM7MfJsuYbjFf4UWbwrUBEL5ZdawExxxFhnGXB6siqokyM"
                },
                "operationName": "q"
            }
        },
        "latestEventsFromContractByBlockHeight": {
            "key": "events",
            "type": "array",
            "cmd": {
                "query": "query q($limit: Int!, $blockHeight: Int!, $publicKey: String!) {\n events(limit: $limit, query: {blockHeight: $blockHeight, blockStateHash: {creatorAccount: {publicKey: $publicKey}}}) {\n blockHeight\n dateTime\n event\n blockStateHash {\n creatorAccount {\n publicKey\n }\n }\n }\n}",
                "variables": {
                    "limit": 10,
                    "blockHeight": 2785,
                    "publicKey": "B62qnLVz8wM7MfJsuYbjFf4UWbwrUBEL5ZdawExxxFhnGXB6siqokyM"
                },
                "operationName": "q"
            }
        }
    },
    "print": {
        "split": "__",
        "insertManual": "<<insert>>",
        "regexs": {
            "format": {},
            "minaAddress": {}
        },
        "levels": [
            "",
            "  {{enumerations__1}}.   ",
            "  {{enumerations__1}}.{{enumerations__2}}. ",
            "  "
        ],
        "spaces": {
            "standard": 30,
            "extended": 40
        },
        "enumerations": {
            "1": [
                "A",
                "B",
                "C",
                "D",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "N",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z"
            ],
            "2": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26"
            ],
            "notFound": ""
        },
        "userInteractions": {
            "yesNo": {
                "validatons": [
                    {
                        "validation": "messages__yes",
                        "finished": {
                            "format": "{{messages__validationIsSetTo}}",
                            "output": true
                        }
                    },
                    {
                        "validation": "messages__no",
                        "finished": {
                            "format": "{{messages__validationIsSetTo}}",
                            "output": true
                        }
                    }
                ],
                "failed": {
                    "format": "{{messages__validationIsSetTo}}",
                    "output": null
                }
            },
            "minaAddress": {
                "validations": [
                    {
                        "validation": "regexs__minaAddress",
                        "finished": {
                            "format": "{{levels}}{{messages__transaction}}{{spaces__standard}}{{status__standard}} {{messages__validationSuccess}}",
                            "output": "userInteractions__input"
                        }
                    }
                ],
                "failed": {
                    "format": "{{levels}}{{messages__transaction}}{{spaces__standard}}{{status__standard}} {{messages__validationFailed}}",
                    "output": null
                }
            }
        },
        "status": {
            "standard": {
                "finished": [
                    "üü©"
                ],
                "failed": [
                    "‚ùå"
                ],
                "progress": [
                    "üîÑ"
                ]
            },
            "loading": {
                "finished": [],
                "failed": [],
                "progress": [
                    "‚ñ∞‚ñ±‚ñ±",
                    "‚ñ∞‚ñ∞‚ñ±",
                    "‚ñ∞‚ñ∞‚ñ∞",
                    "‚ñ±‚ñ∞‚ñ∞",
                    "‚ñ±‚ñ±‚ñ∞",
                    "‚ñ±‚ñ±‚ñ±"
                ]
            }
        },
        "structs": {
            "newLine": {
                "question": null,
                "format": {
                    "finished": ""
                },
                "cmds": null
            },
            "title": {
                "question": null,
                "format": {
                    "finished": "{{levels}}{{external__title}}"
                },
                "cmds": null
            },
            "addDeployers": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__addDeployersFront}} {{spaces__standard}}{{status__standard}} {{status__loading}} {{messages__addDeployersProgress}}",
                    "finished": "{{levels}}{{messages__addDeployersFront}} {{spaces__standard}}{{status__standard}} {{messages__addDeployersSuccess}}",
                    "failed": "{{levels}}{{messages__addDeployersFront}} {{spaces__standard}}{{status__standard}} {{messages__addDeployersFailed}}"
                },
                "cmds": null
            },
            "addEnvironmentAddresses": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__addEnvironmentAddressesFront}} {{spaces__standard}}{{status__standard}} {{status__loading}} {{messages__addEnvironmentAddressesProgress}}",
                    "finished": "{{levels}}{{messages__addEnvironmentAddressesFront}} {{spaces__standard}}{{status__standard}} {{messages__addEnvironmentAddressesSuccess}}",
                    "failed": "{{levels}}{{messages__addEnvironmentAddressesFront}} {{spaces__standard}}{{status__standard}} {{messages__addEnvironmentAddressesFailed}}"
                },
                "cmds": null
            },
            "getFaucet": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__getFaucetFront}} {{spaces__standard}}{{status__standard}} {{status__loading}} {{messages__getFaucetProgress}}",
                    "finished": "{{levels}}{{messages__getFaucetFront}} {{spaces__standard}}{{status__standard}} {{messages__getFaucetSuccess}}",
                    "failed": "{{levels}}{{messages__getFaucetFront}} {{spaces__standard}}{{status__standard}} {{messages__getFaucetFailed}}"
                },
                "cmds": null
            },
            "transactionByHash": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__transactionByHashFront}} {{spaces__standard}}{{status__standard}} {{status__loading}} {{messages__transactionByHashProgress}}",
                    "finished": "{{levels}}{{messages__transactionByHashFront}} {{spaces__standard}}{{status__standard}} {{messages__transactionByHashSuccess}}",
                    "failed": "{{levels}}{{messages__transactionByHashFront}} {{spaces__standard}}{{status__standard}} {{messages__transactionByHashFailed}}"
                },
                "cmds": null
            },
            "latestBlockHeight": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__latestBlockHeightFront}} {{spaces__standard}}{{status__standard}} {{messages__latestBlockHeightProgress}}",
                    "finished": "{{levels}}{{messages__latestBlockHeightFront}} {{spaces__standard}}{{status__standard}} {{messages__latestBlockHeightSuccess}}",
                    "failed": "{{levels}}{{messages__latestBlockHeightFront}} {{spaces__standard}}{{status__standard}} {{messages__latestBlockHeightFailed}}"
                },
                "cmds": null
            },
            "latestBlockHeights": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__latestBlockHeightsFront}} {{spaces__standard}}{{status__standard}} {{messages__latestBlockHeightsProgress}}",
                    "finished": "{{levels}}{{messages__latestBlockHeightsFront}} {{spaces__standard}}{{status__standard}} {{messages__latestBlockHeightsSuccess}}",
                    "failed": "{{levels}}{{messages__latestBlockHeightsFront}} {{spaces__standard}}{{status__standard}} {{messages__latestBlockHeightsFailed}}"
                },
                "cmds": null
            },
            "latestEventsFromContract": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__latestEventsFromContractFront}} {{spaces__standard}}{{status__standard}} {{messages__latestEventsFromContractProgress}}",
                    "finished": "{{levels}}{{messages__latestEventsFromContractFront}} {{spaces__standard}}{{status__standard}} {{messages__latestEventsFromContractSuccess}}",
                    "failed": "{{levels}}{{messages__latestEventsFromContractFront}} {{spaces__standard}}{{status__standard}} {{messages__latestEventsFromContractFailed}}"
                },
                "cmds": null
            },
            "latestEventsFromContractByBlockHeight": {
                "question": null,
                "format": {
                    "progress": "{{levels}}{{messages__latestEventsFromContractByBlockHeightFront}} {{spaces__standard}}{{status__standard}} {{messages__latestEventsFromContractByBlockHeightProgress}}",
                    "finished": "{{levels}}{{messages__latestEventsFromContractByBlockHeightFront}} {{spaces__standard}}{{status__standard}} {{messages__latestEventsFromContractByBlockHeightSuccess}}",
                    "failed": "{{levels}}{{messages__latestEventsFromContractByBlockHeightFront}} {{spaces__standard}}{{status__standard}} {{messages__latestEventsFromContractByBlockHeightFailed}}"
                },
                "cmds": null
            }
        }
    },
    "messages": {
        "use": "en",
        "en": {
            "transactionByHashFront": [
                "Get Transaction by Hash"
            ],
            "transactionByHashProgress": [
                "Waiting for Transaction ID: {{external__hash}}"
            ],
            "transactionByHashSuccess": [
                "Success! {{custom__networkExplorerTransaction}}{{external__hash}}"
            ],
            "transactionByHashFailed": [
                "Transaction not found ({{external__hash}})"
            ],
            "latestBlockHeightFront": [
                "Get Latest Block Height"
            ],
            "latestBlockHeightProgress": [
                "Wait for response."
            ],
            "latestBlockHeightSuccess": [
                "Success! Current Block Height is: {{external__blockHeight}}"
            ],
            "latestBlockHeightFailed": [
                "Unable to fetch results."
            ],
            "latestBlockHeightsFront": [
                "Get Latest Blocks"
            ],
            "latestBlockHeightsProgress": [
                "Waiting for the latest Blocks."
            ],
            "latestBlockHeightsSuccess": [
                "Success! Received {{external__count}} blocks."
            ],
            "latestBlockHeightsFailed": [
                "Unable to fetch results."
            ],
            "latestEventsFromContractFront": [
                "Get Events from Contract"
            ],
            "latestEventsFromContractProgress": [
                "Waiting for Events from ({{external__creator}})"
            ],
            "latestEventsFromContractSuccess": [
                "Success! Received {{external__count}} Events."
            ],
            "latestEventsFromContractFailed": [
                "Unable to fetch results."
            ],
            "latestEventsFromContractByBlockHeightFront": [
                "Get Events by Contract/Block Height"
            ],
            "latestEventsFromContractByBlockHeightProgress": [
                "Waiting for confirmation, {{external__receiver}}"
            ],
            "latestEventsFromContractByBlockHeightSuccess": [
                "Success! Received {{external__count}} Events, ({{external__publicKey}}, {{external__blockHeight}})"
            ],
            "latestEventsFromContractByBlockHeightFailed": [
                "Failed! Creator: {{external__publicKey}}, Block Height {{external__blockHeight}}"
            ],
            "getFaucetFront": [
                "Get Faucet"
            ],
            "getFaucetProgress": [
                "Waiting for confirmation! {{external__receiver}}"
            ],
            "getFaucetSuccess": [
                "Success! {{external__explorer}}"
            ],
            "getFaucetFailed": [
                "Failed!"
            ],
            "addEnvironmentAddressesFront": [
                "Scan Environment"
            ],
            "addEnvironmentAddressesProgress": [
                "Scan folders!"
            ],
            "addEnvironmentAddressesSuccess": [
                "Found {{external__deployers}} Deployers, {{external__contracts}} Contracts"
            ],
            "addEnvironmentAddressesFailed": [
                "Failed!"
            ],
            "addDeployersFront": [
                "Deployers"
            ],
            "addDeployersProgress": [
                "Scanning!"
            ],
            "addDeployersSuccess": [
                "Ready to use: {{external__readyToUse}}, Pending: {{external__pending}}."
            ],
            "addDeployersFailed": [
                "Failed!"
            ],
            "errorKeyNotFound": [
                "Key: \"<<insert>>\" not found"
            ],
            "errorTypeNotFound": [
                "Type: \"<<insert>>\" not found"
            ]
        }
    },
    "typescript": {
        "template": {
            "compilerOptions": {
                "target": "ES2019",
                "module": "es2022",
                "lib": [
                    "dom",
                    "esnext"
                ],
                "outDir": "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/./workdir/build/",
                "rootDir": "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/./workdir/ts/",
                "strict": true,
                "strictPropertyInitialization": false,
                "skipLibCheck": true,
                "forceConsistentCasingInFileNames": true,
                "esModuleInterop": true,
                "moduleResolution": "node",
                "experimentalDecorators": true,
                "emitDecoratorMetadata": true,
                "allowJs": true,
                "declaration": false,
                "sourceMap": false,
                "noFallthroughCasesInSwitch": true,
                "allowSyntheticDefaultImports": true,
                "isolatedModules": true
            },
            "include": null,
            "exclude": [],
            "includes": [
                "/Users/andreasbanholzer/PROJEKTE/2023-07-06--zkignite-cohort-2/easy-mina-v3/./workdir/ts/"
            ]
        },
        "fileName": "tsconfig.json"
    }
}